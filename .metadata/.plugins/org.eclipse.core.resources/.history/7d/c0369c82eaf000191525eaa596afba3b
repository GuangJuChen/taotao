package com.taotao.common.utils;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpATTRS;
import com.jcraft.jsch.SftpException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Vector;

import org.omg.CORBA.SystemException;

/**
 * 
 * @ClassName: SFTPUtil
 * @Description: 文件上传工具类
 * @author chenguangju
 * @date 2019年10月17日
 *
 */
public class SFTPUtil implements AutoCloseable {

    private Session session = null;
    private ChannelSftp channel = null;


    /**
     * 连接sftp服务器
     *
     * @param serverIP 服务IP
     * @param port     端口
     * @param userName 用户名
     * @param password 密码
     * @throws SocketException SocketException
     * @throws IOException     IOException
     * @throws JSchException   JSchException
     */
    public  void connectServer(String serverIP, int port, String userName, String password) throws SocketException, IOException, JSchException {
        JSch jsch = new JSch();
        // 根据用户名，主机ip，端口获取一个Session对象
        session = jsch.getSession(userName, serverIP, port);
        // 设置密码
        session.setPassword(password);
        // 为Session对象设置properties
        Properties config = new Properties();
        config.put("StrictHostKeyChecking", "no");
        session.setConfig(config);
        // 通过Session建立链接
        session.connect();
        // 打开SFTP通道
        channel = (ChannelSftp) session.openChannel("sftp");
        // 建立SFTP通道的连接
        channel.connect();

    }

    /**
     * 自动关闭资源
     */
    public void close() {
        if (channel != null) {
            channel.disconnect();
        }
        if (session != null) {
            session.disconnect();
        }
    }

    public List<ChannelSftp.LsEntry> getDirList(String path) throws SftpException {
        List<ChannelSftp.LsEntry> list = new ArrayList<>();
        if (channel != null) {
            Vector vv = channel.ls(path);
            if (vv == null && vv.size() == 0) {
                return list;
            } else {
                Object[] aa = vv.toArray();
                for (int i = 0; i < aa.length; i++) {
                    ChannelSftp.LsEntry temp = (ChannelSftp.LsEntry) aa[i];
                    list.add(temp);

                }
            }
        }
        return list;
    }

    /**
     * 下载文件
     *
     * @param remotePathFile 远程文件
     * @param localPathFile  本地文件[绝对路径]
     * @throws SftpException SftpException
     * @throws IOException   IOException
     */
    public void downloadFile(String remotePathFile, String localPathFile) throws SftpException, IOException {
        try (FileOutputStream os = new FileOutputStream(new File(localPathFile))) {
            if (channel == null)
                throw new IOException("sftp server not login");
            channel.get(remotePathFile, os);
        }
    }

    /**
     * 上传文件
     *
     * @param remoteFile 远程文件
     * @param localFile
     * @throws SftpException
     * @throws IOException
     */
    public void uploadFile(String remoteFile, String localFile) throws SftpException, IOException {
        try (FileInputStream in = new FileInputStream(new File(localFile))) {
            if (channel == null)
                throw new IOException("sftp server not login");
            channel.put(in, remoteFile);
        }
    }
    
    public void uploadFile2(String remoteFile, String localFile) throws SftpException, IOException {
        try (FileInputStream in = new FileInputStream(new File(localFile))) {
            if (channel == null)
                throw new IOException("sftp server not login");
            channel.put(in, remoteFile);
        }
    }
    
    /**
     * 
     * @Title: createDir
     * @Description: 创建目录
     * @param  createpath
     * @param  sftp 参数
     * @return void 返回类型
     * @throws
     */
    public void createDir(String createpath, ChannelSftp channel) {
    	  try {
    	   if (isDirExist(createpath)) {
    	    this.channel.cd(createpath); 
    	    return;
    	   }
    	   String pathArry[] = createpath.split("/");
    	   StringBuffer filePath = new StringBuffer("/");
    	   for (String path : pathArry) {
    	    if (path.equals("")) {
    	     continue;
    	    }
    	    filePath.append(path + "/");
    	    if (isDirExist(filePath.toString())) {
    	    	channel.cd(filePath.toString());
    	    } else {
    	     // 建立目录
    	    	channel.mkdir(filePath.toString());
    	     // 进入并设置为当前目录
    	    	channel.cd(filePath.toString());
    	    }
    	   }
    	   this.channel.cd(createpath);
    	  } catch (SftpException e) {
    	   System.out.println("创建路径错误");
    	  }
    	 }

    /**
     * 
     * @Title: isDirExist
     * @Description: 判断目录是否存在
     * @param  directory
     * @return boolean 返回类型
     * @throws
     */
	 public boolean isDirExist(String directory) {
	  boolean isDirExistFlag = false;
	  try {
	   SftpATTRS sftpATTRS = channel.lstat(directory);
	   isDirExistFlag = true;
	   return sftpATTRS.isDir();
	  } catch (Exception e) {
	   if (e.getMessage().toLowerCase().equals("no such file")) {
	    isDirExistFlag = false;
	   }
	  }
	  return isDirExistFlag;
	 }

    
    public static void main(String[] args) {
		SFTPUtil sftpUtil = new SFTPUtil();
		try {
			sftpUtil.connectServer("192.168.5.130", 22, "ftpuser", "chenguangju");
			sftpUtil.uploadFile("www/images/1.jpg", "D:\\Documents\\Pictures\\images\\img1.jpg");
			System.out.println("上传成功");
		} catch (SocketException e) {
			// socket异常
			e.printStackTrace();
		} catch (IOException e) {
			// IO异常
			e.printStackTrace();
		} catch (JSchException e) {
			// JSch异常
			e.printStackTrace();
		}
		catch (SftpException e) {
			// Sftp异常
			e.printStackTrace();
		}
	}


}
